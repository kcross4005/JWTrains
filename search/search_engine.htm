<!DOCTYPE html>
<head>
    <httpProtocol>
        <customHeaders>
          <add name="Access-Control-Allow-Origin" value="*" />
          <add name="Access-Control-Allow-Headers" value="Content-Type" />
          <add name="Access-Control-Allow-Methods" value="GET, POST, PUT, DELETE, OPTIONS" />
        </customHeaders>
    </httpProtocol>
    <meta name="viewport" content="width=device-width,initial-scale=1" id="viewport-meta"/>
    <meta content="width=device-width, initial-scale=1, minimum-scale=1, user-scalable=no" name="viewport">
    <link rel="icon" href="favicon.ico">
    <script src="d3.v7.min.js"></script>
    <title>Model Train Search Engine</title>  
</head>
<style>
     * {
        box-sizing: border-box;
      }
    p {
        font-size: 16pt;
    }
    input[type=submit] {
        font-size: 10em;
    }
    td{
        border: 1px solid black;
        width: auto;
    }
    img {
        max-width: 100%;
        height: auto;
    }
    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
    }
    .windowPopup {
        position: relative;
        text-align: center;
        width: 100%;
      }
    .formPopup {
        display: none;
        position: fixed;
        left: 45%;
        top: 5%;
        transform: translate(-50%, 5%);
        border: 3px solid #999999;
        z-index: 9;
     }
     .formContainer {
        max-width: 300px;
        padding: 20px;
        background-color: #fff;
      }
</style>
<body>

    <!-- Page Header, search box -->
    <table style="border-collapse: collapse" width="100%" cellspacing="0" cellpadding="0" bordercolor="#111111" border="0">
        <tbody><tr>
            <td><center><font face="Arial"><font size="5">JWTRAINS.com - </font>
            <font style="font-size: 14pt">The <font color="#FF6600">Lionel</font> train search engine</font></font></center>
    <img src="../banner.JPG" alt="JWTRAINS.COM Repair Lionel Trains" width=90% height=auto border="0"></td></tr>
    <tr><td>Search for set # or year range (e.g., 510 or 1956 or 1960-1965) or component # or description(s) (e.g., 44 or locomotive, diesel)</td></tr>
    <tr><td>
            <form action="" id="searchSets">
            <input type="text" id="searchSetBox">
            <button id="searchBtn" type="submit" font-size="46pt" onclick="replaceTable()">Search</button>
            </form>
        </td>
    </tr>
    </tbody></table>

    <!-- Div to hold the popup box -->
    <div class="windowPopup">
        <div class="formPopup" id="popupForm">
          <form class="formContainer">
            <p id="popupMsg"></p>
            <img id="popupImg" width="100%" height="auto" border="1">
            <button id="popupBtn" type="button" class="btn cancel" onclick="closePopup()">Close</button>
          </form>
        </div>
      </div>

    <!-- table to hold # items returned -->
    <table id="returnCount" border="1" width="100%">
        <tbody id="returnBody">
    </tbody></table>

    <!-- table to hold returned components -->
    <table id="myComponents" border="1" width="100%">
        <colgroup>
            <col span="1" style="width: 25%;">
            <col span="1" style="width: 75%;">
        </colgroup>
        <tbody id="compBody">
    </tbody></table>

    <!-- table to hold returned sets -->
    <table id="mySets" border="1" width="100%">
        <colgroup>
            <col span="1" style="width: 10%;">
            <col span="1" style="width: 30%;">
            <col span="1" style="width: 60%;">
        </colgroup>
        <tbody id="setBody">
    </tbody></table>

<script>
    // Opens popup window
    function popUp(type, msg) {
        // console.log(type, msg);

        // popup showing just a message
        if (type == 1) {
            document.getElementById("popupMsg").innerHTML = msg;
            document.getElementById("popupImg").style.display='none';
        
        // popup showing just an image
        } else if (type == 2) {
            document.getElementById("popupMsg").innerHTML = "";
            document.getElementById("popupImg").src=msg;
            document.getElementById("popupImg").style.display='block';
        }
        
        // Show the popup
        document.getElementById("popupForm").style.display = "block";
        document.getElementById("popupBtn").focus();       // give focus to the popup close button
    }

    // Closes popup window
    function closePopup() {
        document.getElementById("searchBtn").focus();    // return focus to the search button
        document.getElementById("popupForm").style.display = "none";
      }

    // clear previous search results
    function replaceTable() {
        
        let tBodies = ["compBody","setBody"];
        for (let i=0; i<tBodies.length; i++) {
            let old_tbody = document.getElementById(tBodies[i]);
            let new_tbody = document.createElement('tbody');
            new_tbody.setAttribute("id", tBodies[i]);
            old_tbody.parentNode.replaceChild(new_tbody, old_tbody);
        }
    }

    // checks if the image at the specified URL exists in the image folder or not
    function imageExists(imageURL) {
        folderImg = imageList.find(img => img.name === imageURL);   // see if already check this image

        // if not, check folder for image and put name/status into image list
        if (folderImg == null) {
            var http = new XMLHttpRequest();
            http.open('HEAD', imageURL, false);
            http.send();
            imageStatus = http.status;
            const imgObj = { name: imageURL, imgStat: imageStatus};
            imageList.push(imgObj);
        // otherwise return status from image list
        } else {
            imageStatus = folderImg.imgStat;
        }
        return imageStatus != 404;
    }

    // Creates a URL that points to an image if the image is present
    function makeImgURL(image) {
        let imageURL = `../images/${image}_web.JPG`;
        if (imageExists(imageURL)) {
            imageLink = `<a href="#" onclick=popUp(2,"${imageURL}"); return false;">${image}</a><br>`;
        } else {
            imageLink = `${image}<br>`;
        }
        return(imageLink);
    }

    // For returned set data, create table containing the Number and Description of the components in the set
    function makeComponentTable(relationship, components, searchValue) {
        const result = relationship.filter(e => e.SetNum === searchValue);
        let componentHTML = '';
        if (result.length != 0) {
            componentHTML = `<table><colgroup><col span="1" style="width: 10%"><col span="1" style="width: 90%"></colgroup>` + 
                `<tbody><tr><td><b>Component&nbsp#</b></td><td><b>Description</b></td></tr>`;
            for (let i=0; i < result.length; i++) {
                let temp = components.find(obj => {
                    return obj.Number === result[i].ComponentNum
                })
                if (typeof temp === 'undefined') {
                    componentHTML += `<tr><td>${result[i].ComponentNum}</td><td><font color="red">Not present in component data</font></td></tr>`;
                }
                else {
                    imageURL = makeImgURL(temp.Number);
                    componentHTML += `<tr><td>${imageURL}</td><td>${temp.Description}</td></tr>`;
                }
            }
        } else {
            componentHTML = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">No Components are contained in this set.</font>'
        }
        componentHTML += '</tbody></table>';
        return(componentHTML);
    }

    // Function to return article info for the component if it exists
    function makeArticleLine(articles, componentNum) {
        let articleLine = "";
        const result = articles.filter(e => e.Num === componentNum);
        //console.log('article',componentNum, result);
        if (result.length > 0) {
            articleLine = `<br><b>Repair Article by JWTrains: <br>&nbsp;&nbsp;&nbspCategory:&nbsp</b>${result[0].Category}<br>` + 
                `<b>&nbsp;&nbsp;&nbspDescription:&nbsp</b>${result[0].Description}`;
        }
        return(articleLine); 
    }

    // For returned component data, create table containing the Number and Year of the sets containing the comonents
    function makeSetTable(relationship, sets, searchValue) {
        const result = relationship.filter(e => e.ComponentNum === searchValue);
        let setHTML = '';
        if (result.length != 0) {
            setHTML = `<table>` + 
                `<tr><td "width: 20%;"><b>Set #</b></td><td><b>Year</b></td></tr>`;
            for (let i=0; i < result.length; i++) {
                let temp = sets.find(obj => {
                    return obj.Number === result[i].SetNum
                })
                if (typeof temp === 'undefined') {
                    setHTML += `<tr><td>${result[i].ComponentNum}<b> Description: </b><font color="red">Not present in component data</font></tr>`;
                }
                else {
                    setHTML += `<tr><td>${temp.Number}</td><td>${temp.Year}</td></tr>`;
                }
            }
            setHTML += '</table>';
        } else {
            setHTML = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">No Sets contain this component.</font>'
        }
        return(setHTML);

    }   

    // parse search box and return search terms
    function parseSearchBox(searchTerm, sets, components) {

        // Parse input search terms. Default search type to "set"
        let searchType = "set";
        let returnVal = [];

        // "set" - If the search term starts with 19, then is a search for sets by year
        if (searchTerm.slice(0,2) === "19") {
            var searchArray = searchTerm.split('-');
            returnVal[0] = searchArray[0];
            if (searchArray.length == 2) {
                var yearPtr = 0;
                for (let i = searchArray[0]; i<= searchArray[1]; i++) {
                    returnVal[yearPtr++] = i.toString();
                }
            }

         // If the user's number is both a set and component number, tell user and set to component
        } else if ((sets.filter(obj => {return obj.Number.toLowerCase() === searchTerm.toLowerCase()}).length > 0)  &&
                (components.filter(obj => {return obj.Number.toLowerCase() === searchTerm.toLowerCase()}).length > 0)) {
                let dupeSet = sets.filter(obj => {return obj.Number === searchTerm});
                popUp(1, `Note: ${searchTerm} is also a Set from the year ${dupeSet[0].Year}.`);
                searchType = "component";
                returnVal = searchTerm.split(',');
        
        // "setNum" - If the user entered a number, determine if it is a set or component number
        } else if (sets.filter(obj => {return obj.Number.toLowerCase() === searchTerm.toLowerCase()}).length > 0)   {
                searchType = "setNum";
                returnVal = searchTerm;
        
        // "component" - Otherwise, assume a component search by num or description
        } else {
            searchType = "component";
            returnVal = searchTerm.split(',');
        }

        // Return parsed array
        return {
            'searchType': searchType,
            'searchTerms': returnVal
        };
    }
    
     // perform actions when submit clicked
     var imageList = [];    // array to store if image exists in img folder or not
     //document.getElementById("searchBox").focus();    // return focus to the search button
     let searchForm = document.getElementById("searchSets");
     searchForm.addEventListener("submit", (e) => {
        e.preventDefault();
        let searchTerm = document.getElementById("searchSetBox");

        if (searchTerm.value == "" ) {
            popUp(1, "Please enter something to search for.");
            } else   {
                // perform operation with form input

                // input all data tables
                d3.csv("data/sets.csv").then(function(sets) {
                    //console.log('sets: ',sets);
                    d3.csv("data/components.csv").then(function(components) {
                        //console.log('components: ',components);
                        d3.csv("data/relationship.csv").then(function(relationship) {
                            //console.log('relationship: ',relationship);
                            d3.csv("data/articles.csv").then(function(articles) {
                            // console.log('articles: ',articles);

                                // In set array, change " c" track to " curved" and " s" track to " straight"
                                for (let i = 0; i < sets.length; i++) {
                                    sets[i].Track = sets[i].Track.replace(/ c/," curved");
                                    sets[i].Track = sets[i].Track.replace(/ s/," straight");
                                }

                                // In articles array, change Num to leftmost part of Description
                                for (let i = 0; i < articles.length; i++) {
                                    let temp = articles[i].Description.split(/\s+/);
                                    articles[i].Num = temp[0];
                                }

                                // parse the search terms to determine search type and what to search for
                                let searchVals = parseSearchBox(searchTerm.value, sets, components);
                                //console.log('searchVals', searchVals);

                                // "set": search sets by year
                                if (searchVals.searchType === "set") {
                                    //console.log('set:',searchVals);

                                    // Create the output result table
                                    let resultTable =
                                        `<tr><td><b>Year</b></td><td><b>Set</b></td><td><b>Components</b></td></tr>`;
                                    let returnCount = 0
                                    var linePrinted = [];
                                    for (let i = 0; i < sets.length; i++) {
                                        for (let j = 0; j < searchVals.searchTerms.length; j++) {
                                            if (sets[i].Year.toLowerCase().includes(searchVals.searchTerms[j].toLowerCase()))   {
                                                if (!linePrinted.includes(i)) {
                                                    linePrinted.push(i);
                                                    returnCount++;
                                                    let componentList = makeComponentTable(relationship, components, sets[i].Number);
                                                    resultTable += `<tr><td>${sets[i].Year}</td>` + 
                                                        `<td><b>Number: </b>${sets[i].Number}<br><b>Gauge: </b>${sets[i].Gauge}<br>` + 
                                                        `<b>Description: </b>${sets[i].Description}<br><b>Track: </b>${sets[i].Track}<br>` +
                                                        `<b>Transformer: </b>${sets[i].Transformer}</td><td>${componentList}</td></tr>`;
                                                }
                                            }
                                        }
                                    }   // end of looping through sets results
                                    returnBody.innerHTML = "<table><tr><td><b>Number of Sets returned = " + returnCount + 
                                        "</b></td></tr></table>";
                                    setBody.innerHTML = resultTable;
                                    if (returnCount == 0) {
                                        popUp(1, "Search returned no Sets.");
                                    }

                                // "setNum": Search sets by number
                                }  else if (searchVals.searchType === "setNum") {
                                    //console.log('setNum:',searchVals, searchVals.searchTerms);

                                    let resultTable =
                                        `<tr><td><b>Year</b></td><td><b>Set</b></td><td><b>Components</b></td></tr>`;
                                    let returnCount = 0
                                    var linePrinted = [];
                                    for (let i = 0; i < sets.length; i++) {
                                        //console.log(sets[i].Number, searchVals.earchTerms)
                                        if (sets[i].Number.toLowerCase().includes(searchVals.searchTerms.toLowerCase()))   {
                                            returnCount++;
                                            let componentList = makeComponentTable(relationship, components, sets[i].Number);
                                            resultTable += `<tr><td>${sets[i].Year}</td>` + 
                                                `<td><b>Number: </b>${sets[i].Number}<br><b>Gauge: </b>${sets[i].Gauge}<br>` + 
                                                `<b>Description: </b>${sets[i].Description}<br><b>Track: </b>${sets[i].Track}<br>` +
                                                `<b>Transformer: </b>${sets[i].Transformer}</td><td>${componentList}</td></tr>`;
                                            break;
                                        }

                                    }   // end of looping through sets results

                                    returnBody.innerHTML = "<table><tr><td><b>Number of Sets returned = " + returnCount + 
                                    "</b></td></tr></table>";
                                    setBody.innerHTML = resultTable;
                                    if (returnCount == 0) {
                                        popUp(1, "Search returned no Sets.");
                                    }

                                // "component": Search components by number or description
                                } else {
                                    //console.log("Components",searchVals);

                                    // Create the output result table
                                    let resultTable =
                                        '<tr><td><b>Picture</b></td><td><b>Description</b></td>';
                                    let returnCount = 0
                                    for (let i = 0; i < components.length; i++) {
                                        for (let j = 0; j < searchVals.searchTerms.length; j++) {
                                            //console.log(i,j);
                                            if ((components[i].Description.toLowerCase().includes(searchVals.searchTerms[j].toLowerCase())) || 
                                            (components[i].Number.toLowerCase().match(`^${searchVals.searchTerms[j].toLowerCase()}:*`)))  {
                                                //console.log(i,') ', components[i].Number.toLowerCase(), searchVals.searchTerms[j].toLowerCase())
                                                returnCount++;
                                                articleLine = makeArticleLine(articles, components[i].Number);
                                                setList = makeSetTable(relationship, sets, components[i].Number);
                                                let image = '../images/' + components[i].Number + '_web.JPG';
                                                resultTable += `<tr><td><img src=` + image + ` alt="Image ''${image}'' not found."` +
                                                    ` onerror="this.onerror=null;this.src='../images/noImage.jpg';" /></td>` + 
                                                    `<td><b>Number:</b> ${components[i].Number}<br><b>Description:</b> ${components[i].Description}<br>` + 
                                                    `<b>Gauge:</b> ${components[i].Gauge}${articleLine}<br><b>Sets containing this component:</b><br>${setList}</td></tr>`;
                                                    break;
                                            }
                                        }
                                    }   // end of looping through components results
                                    returnBody.innerHTML = "<table><tr><td><b>Number of Components returned = " + returnCount + 
                                        "</b></td></tr></table>";
                                    compBody.innerHTML = resultTable;
                                    if (returnCount == 0) {
                                        popUp(1, "Search returned no Components.");
                                    }

                                }   // end of search components by number or description
                            }); // end of d3.csv for data/articles.csv
                        }); // end of d3.csv for data/relationship.csv
                    }); // end of d3.csv for data/components.csv
                }); // end of d3.csv for data/sets.csv
            };  // end of else after searchTerm == "" check
        });
</script>
</body>
</html>